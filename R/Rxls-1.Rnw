%% LaTeX2e file `R/Rxls-1.Rnw'
%% generated by the `Rnw' environment
%% from source `Rxls' on 2015/09/05.
%%

<<echo=FALSE,eval=TRUE,results="hide">>=
we_cpp<-"
// -*- mode: c++; -*-
//#define WIN32_LEAN_AND_MEAN 1
#include <windef.h>
#include <winbase.h>
#include <wingdi.h>
#include <winuser.h>
#undef ERROR
#include <Rcpp.h>
using namespace Rcpp;
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//
void* _wnd=NULL;

BOOL CALLBACK EnumWindowsProc(HWND wnd, LPARAM lParam);

BOOL CALLBACK EnumWindowsProc(HWND wnd, LPARAM lParam)
{
  return (_wnd==wnd? FALSE:TRUE);
}
// [[Rcpp::export]]
LogicalVector windowExists(long hwnd)
{
  BOOL ret;
  _wnd = (void*)(hwnd);
  ret = EnumWindows(EnumWindowsProc,0);
  return (ret==FALSE);
}
"
@

<<echo=FALSE,results="hide">>=
## -*- mode: R; ess-indent-level=2; -*-
## (setq ess-indent-level 2)
opts_chunk$set(tidy.opts=list(width.cutoff=60),
               comment=NA, prompt=TRUE,
               highlight=FALSE,
               self.contained=FALSE)
options(deparse.cutoff=55,width=55)
while("functions:knitall" %in% search()) detach("functions:knitall")
attach(name="functions:knitall",warn.conflict=FALSE,
       what=local({
           unload.pkgs<-function (x) {
               x<-x[paste("package",x,sep=":") %in% search()]
               for(pkg in x) unloadNamespace(pkg)
           }

           getExcelWithRdev<-function(XL=NULL,
                                      new=FALSE,
                                      nonempty=TRUE,
                                      connect=TRUE){
               ##on.exit({rm(XL);gc()})
               XLvalid<-try(comIsValidHandle(XL),silent=TRUE)
               if(inherits(XLvalid,'try-error') ||  (!XLvalid) || !new)
                   XL<-comGetObject("excel.application")
               if(is.null(XL)) XL<-comCreateObject("excel.application")
               if(is.null(XL)) stop("EXCEL not found")
               if(!comIsValidHandle(XL$workbooks("Rdev.xlam"))){
                   rdev<-normalizePath(file.path(Sys.getenv("appdata"),
                                                 "Rxls","Rdev.xlam"),
                                       mustWork=TRUE)
                   XL$workbooks()$open(rdev)
                   Sys.sleep(0.5)
               }
               if(nonempty && (XL$workbooks()$count()==0)){
                   XL$workbooks()$add()
                   Sys.sleep(0.5)
               }
               if(connect) XL$run("R.RIC.connect",TRUE)
               invisible(XL)
           }

           ActiveCellInNewWb<-function(XL=THISXL){
             withObj(XL$workbooks()$add(), .$sheets(1)$range("$A$1")$activate())
             gc()
             invisible(NULL)
           }

           as.XLdata<-function(x,nrow=length (x),ncol=1) {
             if (is.matrix (x)) return (x)
             dim(x)<-c (nrow,ncol)
             x
           }

           fp <- function(...,dot=getwd()) {
             normalizePath(file.path(dot,...),mustWork=FALSE)
           }

           capturewnd<-function(...,.XL=THISXL){
             .hwnd<-.XL$hwnd()
             .fp<-fp("bmp",...)
             gc()
             .XL$run("Rdev.xlam!capturewnd.capturewnd",.hwnd,.fp)
             Sys.sleep(.5)
           }

           setRibbon<-function(XL=THISXL,hide=TRUE,extraKeys=""){
             h1<-XL$activewindow()$height()
             .hwnd<-XL$hwnd()
             keys<-paste("^{F1}",extraKeys,sep="")
             gc()
             XL$run("R.WINAPI.sendkeysToHwnd",.hwnd,keys)
             Sys.sleep(.5)
             h2<-XL$activewindow()$height()
             if(((h1>h2) && hide) || ((h1<h2) && !hide)){
               gc()
               XL$run("R.WINAPI.sendkeysToHwnd",.hwnd,"^{F1}")
             }
           }

           ##           require(Rcpp,quietly = TRUE)
           ##           Rcpp::sourceCpp(code=we_cpp,env=environment())
           ##           we_code<-NULL
           ## this defines windowExists function!
           mknext<-function(iter=function(...){},repr=function(x)x,
                            maxiter=5,init=NULL,
                            wait=.01)
             {
               last<-repr(init)
               function(...){
                 i<-0
                 x<-NULL
                 repeat{
                   i<-i+1
                   x<-iter(...)
                   rx<-repr(x)
                   if((is.null(x) || identical(rx,last)) && i<=maxiter){
                     cat(".");i<<-i+1
                   }else{
                     last<<-rx
                     if(i>maxiter) x<-NULL
                     break()
                   }
                   x<-NULL;gc();gc()
                   Sys.sleep(wait)
                 }
                 return(x)
               }
             }
           closeAllExcel<-function(){
             nextXL<-mknext(iter=function(...)
               withObj(comGetObject("excel.application"),
                       if (comIsValidHandle(.)) {.[["visible"]]<-TRUE;.}),
                            repr=function(x) x[["hwnd"]]
                            )
             repeat{
               if(is.null(THISXL<-nextXL())) break()
               cat("\nexcel[",THISXL[["hwnd"]],"]",sep="")
               THISXL[["displayalerts"]]<-FALSE
               THISXL$quit() ## $
               THISXL<-NULL
               Sys.sleep(.05)
               gc()
               gc()
               Sys.sleep(.05)
             }
             rm (nextXL);gc ();gc();invisible(NULL);
           }

           safe.detach<-function(names){
             for(nn in names)
               while(nn %in% search()) detach(nn,character.only=T)
           }
           change.cmd<-function(cmd,fun,keep,...){
             x<-parse(text=cmd,keep.source = FALSE)
             y<-x[[1]]
             if(!missing(keep)) {
               y<-y[c(1,match(keep,names(y),nomatch = 0))]
               if(!is.null(names(keep))){
                 names(y)<-c("",names(keep))
               }
             }
             if(!missing(fun))  y[[1]]<-as.name(fun)
             z<-list(...)
             if(length(z)>0) y[names(z)]<-z
             x[[1]]<-y
             as.character(x)
           }
           environment()
         }))
unload.pkgs(c("jaradek2013","Rxls","com","comproxy"))
@
% $
